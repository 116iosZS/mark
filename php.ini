
[Source](http://blog.lizhigang.net/archives/30 "Permalink to php.ini详细注释及推荐设置【PHP 5.2.8中php.ini-recommended文件】 | Jackie li's Blog")

# php.ini详细注释及推荐设置【PHP 5.2.8中php.ini-recommended文件】 | Jackie li's Blog

搞PHP快1年了 一直都不怎么关注php.ini的设置情况。这次有时间静下心整理了一下，发到网上看看有没有朋友需要的。
样例和下载都采用php5.2.8中的php.ini-recommended文件。
中文注释有直译的部分和注释说明的部分，参考了比较多的文件进行比对，令还有一些没有翻译的，比较简单或者特别不常用的都没有写出来=。=||

下载地址 [php_中文注释.ini][1]
上代码了（比较长=。=||）：
`
[PHP]`

;;;;;;;;;;;;;;;;;;;
; About php.ini ;
;;;;;;;;;;;;;;;;;;;
; This file controls many aspects of PHP’s behavior. In order for PHP to
; read it, it must be named ‘php.ini’. PHP looks for it in the current
; working directory, in the path designated by the environment variable
; PHPRC, and in the path that was defined in compile time (in that order).
; Under Windows, the compile-time path is the Windows directory. The
; path in which the php.ini file is looked for can be overridden using
; the -c argument in command line mode.
; ===============================
; 这个文件控制了很多PHP的行为。为了读取，此文件必须命名为php.ini。PHP会在
; 当前工作文件夹（即被PHPRC环境变量定义的），和被编译的时定义的目录下。
; 在windows操作系统下，编译路径是&amp;*&amp;*（不太懂=.=||）。PHP.ini所寻找的路径
; 可以通过在命令行模式下加 -c进行重写。
; ===============================
; The syntax of the file is extremely simple. Whitespace and Lines
; beginning with a semicolon are silently ignored (as you probably guessed).
; Section headers (e.g. [Foo]) are also silently ignored, even though
; they might mean something in the future.
; ===============================
; 这个文件的语法非常简单。空白字符和以分号开头的将被忽略。（就像你猜测的那样）
; 章节标题（如[Foo]）也将被忽略，即使他们有可能在将来会有意义。
; ===============================
; Directives are specified using the following syntax:
; directive = value
; Directive names are *case sensitive* – foo=bar is different from FOO=bar.
; ===============================
; 指令使用以下的语法；
; directive = value
; 指令名是对大小写敏感的 foo=bar和FOO=bar是不同的。
; ===============================
; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one
; of the INI constants (On, Off, True, False, Yes, No and None) or an expression
; (e.g. E_ALL &amp; ~E_NOTICE), or a quoted string (“foo”).
;
; Expressions in the INI file are limited to bitwise operators and parentheses:
; | bitwise OR
; &amp; bitwise AND
; ~ bitwise NOT
; ! boolean NOT
;
; Boolean flags can be turned on using the values 1, On, True or Yes.
; They can be turned off using the values 0, Off, False or No.
;
; An empty string can be denoted by simply not writing anything after the equal
; sign, or by using the None keyword:
;
; foo = ; sets foo to an empty string
; foo = none ; sets foo to an empty string
; foo = “none” ; sets foo to the string ‘none’
;
; If you use constants in your value, and these constants belong to a
; dynamically loaded extension (either a PHP extension or a Zend extension),
; you may only use these constants *after* the line that loads the extension.
; ===============================
; 值可能是一个字符串，一个数组，一个PHP的常量（如E_ALL 或 M_PI），一个INI常量
; （On, Off, True, False, Yes, No and None）,一个表达式，or a quoted string
; INI下的表达式仅使用：
; | 位或
; &amp; 位与
; ~ 位非
; ! 逻辑非
; 布尔标记中0和1会被转换成True或Yes和false或No
; 一个空的字符串可以用在等号后不写任何东西表示，或者用 none 关键字：
; foo = ; 将foo设为空字符串
; foo = none ; 将foo设为空字符串
; foo = “none” ; 将foo设为字符串’none’
; 如果你在指令值中使用动态扩展(PHP扩展或Zend扩展)中的常量，
; 那么你只能在加载这些动态扩展的指令行之后使用这些常量。
; ===============================
;
;;;;;;;;;;;;;;;;;;;
; About this file ;
;;;;;;;;;;;;;;;;;;;
; This is the recommended, PHP 5-style version of the php.ini-dist file. It
; sets some non standard settings, that make PHP more efficient, more secure,
; and encourage cleaner coding.
;
; The price is that with these settings, PHP may be incompatible with some
; applications, and sometimes, more difficult to develop with. Using this
; file is warmly recommended for production sites. As all of the changes from
; the standard settings are thoroughly documented, you can go over each one,
; and decide whether you want to use it or not.
;
; For general information about the php.ini file, please consult the php.ini-dist
; file, included in your PHP distribution.
;
; This file is different from the php.ini-dist file in the fact that it features
; different values for several directives, in order to improve performance, while
; possibly breaking compatibility with the standard out-of-the-box behavior of
; PHP. Please make sure you read what’s different, and modify your scripts
; accordingly, if you decide to use this file instead.
; ================================
; 这是一个推荐的、PHP5版本的php.ini-dist文件。它设置了一些非标准的设置，这样使PHP
; 变得更有效率、更安全、更清洁。
; 不符合一些应用的设置，有时发展起来更困难。强烈推荐在生产环境下使用这个文件。由于
; 所有的设置的改变都被验证过，你可以转变每一个设置，并且可以决定是否使用它。
; 对于一般的信息，请参考 php.in-dist文件，它放在你的PHP发行安装包里。
; 这个文件在实际环境中设置的值是和php.ini-dist是不同的，为了改进性能，有时可能会打破
; 常规设置PHP的行为。加入你要使用这个文件代替php.ini的话，请确认这些不同点，并修改你的脚本。
; ================================
; – register_long_arrays = Off [Performance]
; Disables registration of the older (and deprecated) long predefined array
; variables ($HTTP_*_VARS). Instead, use the superglobals that were
; introduced in PHP 4.1.0
; – display_errors = Off [Security]
; With this directive set to off, errors that occur during the execution of
; scripts will no longer be displayed as a part of the script output, and thus,
; will no longer be exposed to remote users. With some errors, the error message
; content may expose information about your script, web server, or database
; server that may be exploitable for hacking. Production sites should have this
; directive set to off.
; – log_errors = On [Security]
; This directive complements the above one. Any errors that occur during the
; execution of your script will be logged (typically, to your server’s error log,
; but can be configured in several ways). Along with setting display_errors to off,
; this setup gives you the ability to fully understand what may have gone wrong,
; without exposing any sensitive information to remote users.
; – output_buffering = 4096 [Performance]
; Set a 4KB output buffer. Enabling output buffering typically results in less
; writes, and sometimes less packets sent on the wire, which can often lead to
; better performance. The gain this directive actually yields greatly depends
; on which Web server you’re working with, and what kind of scripts you’re using.
; – register_argc_argv = Off [Performance]
; Disables registration of the somewhat redundant $argv and $argc global
; variables.
; – magic_quotes_gpc = Off [Performance]
; Input data is no longer escaped with slashes so that it can be sent into
; SQL databases without further manipulation. Instead, you should use the
; database vendor specific escape string function on each input element you
; wish to send to a database.
; – variables_order = “GPCS” [Performance]
; The environment variables are not hashed into the $_ENV. To access
; environment variables, you can use getenv() instead.
; – error_reporting = E_ALL [Code Cleanliness, Security(?)]
; By default, PHP suppresses errors of type E_NOTICE. These error messages
; are emitted for non-critical errors, but that could be a symptom of a bigger
; problem. Most notably, this will cause error messages about the use
; of uninitialized variables to be displayed.
; – allow_call_time_pass_reference = Off [Code cleanliness]
; It’s not possible to decide to force a variable to be passed by reference
; when calling a function. The PHP 4 style to do this is by making the
; function require the relevant argument by reference.
; – short_open_tag = Off [Portability]
; Using short tags is discouraged when developing code meant for redistribution
; since short tags may not be supported on the target server.

;;;;;;;;;;;;;;;;;;;;
; Language Options ;
;;;;;;;;;;;;;;;;;;;;

; Enable the PHP scripting language engine under Apache.
; 是否启用PHP解析引擎。
; 提示：可以在httpd.conf中基于目录或者虚拟主机来打开或者关闭PHP解析引擎。
engine = On

; Enable compatibility mode with Zend Engine 1 (PHP 4.x)
; 是否使用兼容Zend引擎I(PHP 4.x)的模式。PHP6中将删除该指令(相当于Off)。
; 这将影响对象的复制、构造(无属性的对象会产生FALSE或0)、比较。
; 兼容模式下，对象将按值传递，而不是默认的按引用传递。
zend.ze1_compatibility_mode = Off

; Allow the tags are recognized.
; NOTE: Using short tags should be avoided when developing applications or
; libraries that are meant for redistribution, or deployment on PHP
; servers which are not under your control, because short tags may not
; be supported on the target server. For portable, redistributable code,
; be sure not to use short tags.
; 是否允许使用”"短标识。否则必须使用”"长标识。
; 除非你的php程序仅在受控环境下运行，且只供自己使用，否则请不要使用短标记。
; 如果要和XML结合使用PHP，可以选择关闭此选项以方便直接嵌入”"，
; 不然你必须用PHP来输出：
; 本指令也会影响到缩写形式” short_open_tag = Off

; Allow ASP-style  tags.
; 是否允许ASP样式的标识
asp_tags = Off

; The number of significant digits displayed in floating point numbers.
; 浮点数显示的有效位数
precision = 14

; Enforce year 2000 compliance (will cause problems with non-compliant browsers)
; 是否强制打开2000年适应(可能在非Y2K适应的浏览器中导致问题)。
y2k_compliance = On

; Output buffering allows you to send header lines (including cookies) even
; after you send body content, at the price of slowing PHP’s output layer a
; bit. You can enable output buffering during runtime by calling the output
; buffering functions. You can also enable output buffering for all files by
; setting this directive to On. If you wish to limit the size of the buffer
; to a certain size – you can use a maximum number of bytes instead of ‘On’, as
; a value for this directive (e.g., output_buffering=4096).
; 输出缓冲允许你甚至在输出正文内容之后再发送HTTP头(包括cookies)。
; 其代价是输出层减慢一点点速度。
; 设置输出缓冲可以减少写入，有时还能减少网络数据包的发送。
; 这个参数的实际收益很大程度上取决于你使用的是什么Web服务器以及什么样的脚本。
; 输出缓冲区大小(字节)。建议值为4096~8192。
output_buffering = 4096

; You can redirect all of the output of your scripts to a function. For
; example, if you set output_handler to “mb_output_handler”, character
; encoding will be transparently converted to the specified encoding.
; Setting any output handler automatically turns on output buffering.
; Note: People who wrote portable scripts should not depend on this ini
; directive. Instead, explicitly set the output handler using ob_start().
; Using this ini directive may cause problems unless you know what script
; is doing.
; Note: You cannot use both “mb_output_handler” with “ob_iconv_handler”
; and you cannot use both “ob_gzhandler” and “zlib.output_compression”.
; Note: output_handler must be empty if this is set ‘On’ !!!!
; Instead you must use zlib.output_handler.
;output_handler =
; 你可以将所有脚本的输出重定向到一个输出处理函数。
; 比如，重定向到mb_output_handler()函数时，字符编码将被透明地转换为指定的编码。
; 一旦你在这里指定了输出处理程序，输出缓冲将被自动打开(output_buffering=4096)。
; 注意: 此处仅能使用PHP内置的函数，自定义函数应在脚本中使用ob_start()指定。
; 注意: 你不能同时使用”mb_output_handler”和”ob_iconv_handler”两个输出处理函数。
; 你也不能同时使用”ob_gzhandler”输出处理函数和zlib.output_compression指令。
; 注意: 如果使用zlib.output_handler指令开启zlib输出压缩，该指令必须为空。

; Transparent output compression using the zlib library
; Valid values for this option are ‘off’, ‘on’, or a specific buffer size
; to be used for compression (default is 4KB)
; Note: Resulting chunk size may vary due to nature of compression. PHP
; outputs chunks that are few hundreds bytes each as a result of
; compression. If you prefer a larger chunk size for better
; performance, enable output_buffering in addition.
; Note: You need to use zlib.output_handler instead of the standard
; output_handler, or otherwise the output will be corrupted.
zlib.output_compression = Off
;zlib.output_compression_level = -1
; 是否使用zlib库透明地压缩脚本输出结果。
; 该指令的值可以设置为：Off、On、字节数(压缩缓冲区大小，默认为4096)。
; 如果打开该指令，当浏览器发送”Accept-Encoding: gzip(deflate)”头时，
; “Content-Encoding: gzip(deflate)”和”Vary: Accept-Encoding”头将加入到应答头当中。
; 你可以在应答头输出之前用ini_set()函数在脚本中启用或禁止这个特性。
; 如果输出一个”Content-Type: image/??”这样的应答头，压缩将不会启用(为了防止Netscape的bug)。
; 你可以在输出”Content-Type: image/??”之后使用”ini_set(‘zlib.output_compression’, ‘On’)”重新打开这个特性。
; 注意1: 压缩率会受压缩缓冲区大小的影响，如果你想得到更好的压缩质量，请指定一个较大的压缩缓冲区。
; 注意2: 如果启用了zlib输出压缩，output_handler指令必须为空，同时必须设置zlib.output_handler指令的值。

; You cannot specify additional output handlers if zlib.output_compression
; is activated here. This setting does the same as output_handler but in
; a different order.
;zlib.output_handler =
; 在打开zlib.output_compression指令的情况下，你只能在这里指定输出处理器。
; 可以使用的处理器有”zlib.inflate”(解压)或”zlib.deflate”(压缩)。
; 如果启用该指令则必须将output_handler指令设为空。

; Implicit flush tells PHP to tell the output layer to flush itself
; automatically after every output block. This is equivalent to calling the
; PHP function flush() after each and every call to print() or echo() and each
; and every HTML block. Turning this option on has serious performance
; implications and is generally recommended for debugging purposes only.
implicit_flush = Off
; 是否要求PHP输出层在每个输出块之后自动刷新数据。
; 这等效于在每个 print()、echo()、HTML块 之后自动调用flush()函数。
; 打开这个选项对程序执行的性能有严重的影响，通常只推荐在调试时使用。

; The unserialize callback function will be called (with the undefined class’
; name as parameter), if the unserializer finds an undefined class
; which should be instantiated.
; A warning appears if the specified function is not defined, or if the
; function doesn’t include/implement the missing class.
; So only set this entry, if you really want to implement such a
; callback-function.
unserialize_callback_func=
; 如果解序列化处理器需要实例化一个未定义的类，
; 这里指定的回调函数将以该未定义类的名字作为参数被unserialize()调用，
; 以免得到不完整的”__PHP_Incomplete_Class”对象。
; 如果这里没有指定函数，或指定的函数不包含(或实现)那个未定义的类，将会显示警告信息。
; 所以仅在确实需要实现这样的回调函数时才设置该指令。
; 若要禁止这个特性，只需置空即可。

; When floats &amp; doubles are serialized store serialize_precision significant
; digits after the floating point. The default value ensures that when floats
; are decoded with unserialize, the data will remain the same.
serialize_precision = 100
; 将浮点型和双精度型数据序列化存储时的精度(有效位数)。
; 默认值能够确保浮点型数据被解序列化程序解码时不会丢失数据。

; Whether to enable the ability to force arguments to be passed by reference
; at function call time. This method is deprecated and is likely to be
; unsupported in future versions of PHP/Zend. The encouraged method of
; specifying which arguments should be passed by reference is in the function
; declaration. You’re encouraged to try and turn this option Off and make
; sure your scripts work properly with it in order to ensure they will work
; with future versions of the language (you will receive a warning each time
; you use this feature, and the argument will be passed by value instead of by
; reference).
allow_call_time_pass_reference = Off
; 是否强迫在函数调用时按引用传递参数(每次使用此特性都会收到一条警告)。
; php反对这种做法，并在PHP6里删除了该指令(相当于设为Off)，因为它影响到了代码的整洁。
; 鼓励的方法是在函数声明里明确指定哪些参数按引用传递。
; 我们鼓励你关闭这一选项，以保证你的脚本在将来版本的语言里仍能正常工作。

;
; Safe Mode
;
safe_mode = Off
; 是否启用安全模式。
; 打开时，PHP将检查当前脚本的拥有者是否和被操作的文件的拥有者相同，
; 相同则允许操作，不同则拒绝操作。

; By default, Safe Mode does a UID compare check when
; opening files. If you want to relax this to a GID compare,
; then turn on safe_mode_gid.
safe_mode_gid = Off
; 在安全模式下，默认在访问文件时会做UID比较检查。
; 但有些情况下严格的UID检查反而是不适合的，宽松的GID检查已经足够。
; 如果你想将其放宽到仅做GID比较，可以打开这个参数。

; When safe_mode is on, UID/GID checks are bypassed when
; including files from this directory and its subdirectories.
; (directory must also be in include_path or full path must
; be used when including)
safe_mode_include_dir =
; 在安全模式下，该组目录和其子目录下的文件被包含时，将跳过UID/GID检查。
; 换句话说，如果此处的值为空，任何UID/GID不符合的文件都不允许被包含。
; 这里设置的目录必须已经存在于include_path指令中或者用完整路径来包含。
; 多个目录之间用冒号(Win下为分号)隔开。
; 指定的限制实际上是一个前缀，而非一个目录名，
; 也就是说”/dir/incl”将允许访问”/dir/include”和”/dir/incls”
; 如果您希望将访问控制在一个指定的目录，那么请在结尾加上斜线。

; When safe_mode is on, only executables located in the safe_mode_exec_dir
; will be allowed to be executed via the exec family of functions.
safe_mode_exec_dir =
; 在安全模式下，只有该目录下的可执行程序才允许被执行系统程序的函数执行。
; 注释：这些函数是：system, escapeshellarg, escapeshellcmd, exec, passthru,
; proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, shell_exec

; Setting certain environment variables may be a potential security breach.
; This directive contains a comma-delimited list of prefixes. In Safe Mode,
; the user may only alter environment variables whose names begin with the
; prefixes supplied here. By default, users will only be able to set
; environment variables that begin with PHP_ (e.g. PHP_FOO=BAR).
;
; Note: If this directive is empty, PHP will let the user modify ANY
; environment variable!
safe_mode_allowed_env_vars = PHP_
; 在安全模式下，用户仅可以更改的环境变量的前缀列表(逗号分隔)。
; 允许用户设置某些环境变量，可能会导致潜在的安全漏洞。
; 注意: 如果这一参数值为空，PHP将允许用户更改任意环境变量！

; This directive contains a comma-delimited list of environment variables that
; the end user won’t be able to change using putenv(). These variables will be
; protected even if safe_mode_allowed_env_vars is set to allow to change them.
safe_mode_protected_env_vars = LD_LIBRARY_PATH
; 在安全模式下，用户不能更改的环境变量列表(逗号分隔)。
; 这些变量即使在safe_mode_allowed_env_vars指令设置为允许的情况下也会得到保护。

; open_basedir, if set, limits all file operations to the defined directory
; and below. This directive makes most sense if used in a per-directory
; or per-virtualhost web server configuration file. This directive is
; *NOT* affected by whether Safe Mode is turned On or Off.
;open_basedir =
; 将PHP允许操作的所有文件(包括文件自身)都限制在此组目录列表下。
; 当一个脚本试图打开一个指定目录树之外的文件时，将遭到拒绝。
; 所有的符号连接都会被解析，所以不可能通过符号连接来避开此限制。
; 特殊值’.'指定了存放该脚本的目录将被当做基准目录，
; 但这有些危险，因为脚本的工作目录可以轻易被chdir()改变。
; 对于共享服务器，在httpd.conf中针对不同的虚拟主机或目录灵活设置该指令将变得非常有用。
; 在Windows中用分号分隔目录，UNIX系统中用冒号分隔目录。
; 作为Apache模块时，父目录中的open_basedir路径将自动被继承。
; 指定的限制实际上是一个前缀，而非一个目录名，
; 也就是说”/dir/incl”将允许访问”/dir/include”和”/dir/incls”，
; 如果您希望将访问控制在一个指定的目录，那么请在结尾加上一个斜线。
; 默认是允许打开所有文件。

; This directive allows you to disable certain functions for security reasons.
; It receives a comma-delimited list of function names. This directive is
; *NOT* affected by whether Safe Mode is turned On or Off.
; 该指令接受一个用逗号分隔的函数名列表，以禁用特定的函数，是否为安全模式并不
; 影响该设置。

disable_functions =

; This directive allows you to disable certain classes for security reasons.
; It receives a comma-delimited list of class names. This directive is
; *NOT* affected by whether Safe Mode is turned On or Off.
; 该指令接受一个用逗号分隔的类名列表，以禁用特定的类。
disable_classes =

; Colors for Syntax Highlighting mode. Anything that’s acceptable in
;  would work.
; 语法高亮模式的色彩(通常用于显示 .phps 文件)。
; 只要能被接受的东西就能正常工作。
;highlight.string = #DD0000
;highlight.comment = #FF9900
;highlight.keyword = #007700
;highlight.bg = #FFFFFF
;highlight.default = #0000BB
;highlight.html = #000000

; If enabled, the request will be allowed to complete even if the user aborts
; the request. Consider enabling it if executing long request, which may end up
; being interrupted by the user or a browser timing out.
; 是否即使在用户中止请求后也坚持完成整个请求。
; 在执行一个长请求的时候应当考虑打开该它，
; 因为长请求可能会导致用户中途中止或浏览器超时。
; ignore_user_abort = On

; Determines the size of the realpath cache to be used by PHP. This value should
; be increased on systems where PHP opens many files to reflect the quantity of
; the file operations performed.
; 指定PHP使用的realpath(规范化的绝对路径名)缓冲区大小。
; 在PHP打开大量文件的系统上应当增大该值以提高性能。
; realpath_cache_size=16k

; Duration of time, in seconds for which to cache realpath information for a given
; file or directory. For systems with rarely changing files, consider increasing this
; value.
; realpath_cache_ttl=120
; realpath缓冲区中信息的有效期(秒)。
; 对文件很少变动的系统，可以增大该值以提高性能。

;
; Misc
;
; Decides whether PHP may expose the fact that it is installed on the server
; (e.g. by adding its signature to the Web server header). It is no security
; threat in any way, but it makes it possible to determine whether you use PHP
; on your server or not.
; 是否暴露PHP被安装在服务器上的事实(在http头中加上其签名)。
; 它不会有安全上的直接威胁，但它使得客户端知道服务器上安装了PHP。
expose_php = On

;;;;;;;;;;;;;;;;;;;
; Resource Limits ;
;;;;;;;;;;;;;;;;;;;

max_execution_time = 30 ; Maximum execution time of each script, in seconds
; 每个脚本最大允许执行时间(秒)，0 表示没有限制。
; 这个参数有助于阻止劣质脚本无休止的占用服务器资源。
; 该指令仅影响脚本本身的运行时间，任何其它花费在脚本运行之外的时间，
; 如用system()/sleep()函数的使用、数据库查询、文件上传等，都不包括在内。
; 在安全模式下，你不能用ini_set()在运行时改变这个设置。
max_input_time = 60 ; Maximum amount of time each script may spend parsing request data
; 每个脚本解析输入数据(POST, GET, upload)的最大允许时间(秒)。
; -1 表示不限制。
;max_input_nesting_level = 64 ; Maximum input variable nesting level
; 输入变量的最大嵌套深度(尚无更多解释文档)
memory_limit = 128M ; Maximum amount of memory a script may consume (128MB)
; 一个脚本所能够申请到的最大内存字节数(可以使用K和M作为单位)。
; 这有助于防止劣质脚本消耗完服务器上的所有内存。
; 要能够使用该指令必须在编译时使用”–enable-memory-limit”配置选项。
; 如果要取消内存限制，则必须将其设为 -1 。
; 设置了该指令后，memory_get_usage()函数将变为可用。

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Error handling and logging ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; error_reporting is a bit-field. Or each number up to get desired error
; reporting level
; E_ALL – All errors and warnings (doesn’t include E_STRICT)
; E_ERROR – fatal run-time errors
; E_RECOVERABLE_ERROR – almost fatal run-time errors
; E_WARNING – run-time warnings (non-fatal errors)
; E_PARSE – compile-time parse errors
; E_NOTICE – run-time notices (these are warnings which often result
; from a bug in your code, but it’s possible that it was
; intentional (e.g., using an uninitialized variable and
; relying on the fact it’s automatically initialized to an
; empty string)
; E_STRICT – run-time notices, enable to have PHP suggest changes
; to your code which will ensure the best interoperability
; and forward compatibility of your code
; E_CORE_ERROR – fatal errors that occur during PHP’s initial startup
; E_CORE_WARNING – warnings (non-fatal errors) that occur during PHP’s
; initial startup
; E_COMPILE_ERROR – fatal compile-time errors
; E_COMPILE_WARNING – compile-time warnings (non-fatal errors)
; E_USER_ERROR – user-generated error message
; E_USER_WARNING – user-generated warning message
; E_USER_NOTICE – user-generated notice message
;
; 错误报告级别是位字段的叠加，推荐使用 E_ALL | E_STRICT
; 6143 E_ALL 除E_STRICT外的所有错误(PHP6中为8191,即包含所有)
; 1 E_ERROR 致命的运行时错误
; 4096 E_RECOVERABLE_ERROR 接近致命的运行时错误，若未被捕获则视同E_ERROR
; 2 E_WARNING 运行时警告(非致命性错误)
; 4 E_PARSE 编译时解析错误
; 8 E_NOTICE 运行时提醒(经常是bug，也可能是有意的)
; 2048 E_STRICT 编码标准化警告(建议如何修改以向前兼容)
; 16 E_CORE_ERROR PHP启动时初始化过程中的致命错误
; 32 E_CORE_WARNING PHP启动时初始化过程中的警告(非致命性错)
; 64 E_COMPILE_ERROR 编译时致命性错
; 128 E_COMPILE_WARNING 编译时警告(非致命性错)
; 256 E_USER_ERROR 用户自定义的致命错误
; 512 E_USER_WARNING 用户自定义的警告(非致命性错误)
; 1024 E_USER_NOTICE 用户自定义的提醒(经常是bug，也可能是有意的)

; Examples:
;
; – Show all errors, except for notices and coding standards warnings
;
;error_reporting = E_ALL &amp; ~E_NOTICE
;
; – Show all errors, except for notices
;
;error_reporting = E_ALL &amp; ~E_NOTICE | E_STRICT
;
; – Show only errors
;
;error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR
;
; – Show all errors, except coding standards warnings
;
error_reporting = E_ALL

; Print out errors (as a part of the output). For production web sites,
; you’re strongly encouraged to turn this feature off, and use error logging
; instead (see below). Keeping display_errors enabled on a production web site
; may reveal security information to end users, such as file paths on your Web
; server, your database schema or other information.
;
; possible values for display_errors:
;
; Off – Do not display any errors
; stderr – Display errors to STDERR (affects only CGI/CLI binaries!)
; On or stdout – Display errors to STDOUT (default)
;
; To output errors to STDERR with CGI/CLI:
;display_errors = “stderr”
;
; Default
;
; 是否将错误信息作为输出的一部分显示。
; 在最终发布的web站点上，强烈建议你关掉这个特性，并使用错误日志代替(参看下面)。
; 在最终发布的web站点打开这个特性可能暴露一些安全信息，
; 例如你的web服务上的文件路径、数据库规划或别的信息。
; 可能的设置值
; off – 不显示任何错误
display_errors = Off

; Even when display_errors is on, errors that occur during PHP’s startup
; sequence are not displayed. It’s strongly recommended to keep
; display_startup_errors off, except for when debugging.
; 是否显示PHP启动时的错误。
; 即使display_errors指令被打开，关闭此参数也将不显示PHP启动时的错误。
; 建议你关掉这个特性，除非你必须要用于调试中。
display_startup_errors = Off

; Log errors into a log file (server-specific log, stderr, or error_log (below))
; As stated above, you’re strongly advised to use error logging in place of
; error displaying on production web sites.
; 是否在日志文件里记录错误，具体在哪里记录取决于error_log指令。
; 强烈建议你在最终发布的web站点时使用日志记录错误而不是直接输出，
; 这样可以让你既知道那里出了问题，又不会暴露敏感信息。
log_errors = On

; Set maximum length of log_errors. In error_log information about the source is
; added. The default is 1024 and 0 allows to not apply any maximum length at all.
; 设置错误日志中附加的与错误信息相关联的错误源的最大长度。
; 这里设置的值对显示的和记录的错误以及$php_errormsg都有效。
; 设为 0 可以允许无限长度。
log_errors_max_len = 1024

; Do not log repeated messages. Repeated errors must occur in same file on same
; line unless ignore_repeated_source is set true.
; 记录错误日志时是否忽略重复的错误信息。
; 错误信息必须出现在同一文件的同一行才被被视为重复。
ignore_repeated_errors = Off

; Ignore source of message when ignoring repeated messages. When this setting
; is On you will not log errors with repeated messages from different files or
; source lines.
; 是否在忽略重复的错误信息时忽略重复的错误源。
ignore_repeated_source = Off

; If this parameter is set to Off, then memory leaks will not be shown (on
; stdout or in the log). This has only effect in a debug compile, and if
; error reporting includes E_WARNING in the allowed list
; 是否报告内存泄漏。这个参数只在以调试方式编译的PHP中起作用，
; 并且必须在error_reporting指令中包含 E_WARNING
report_memleaks = On

;report_zend_debug = 0

; Store the last error/warning message in $php_errormsg (boolean).
; 是否在变量$php_errormsg中保存最近一个错误或警告消息。
track_errors = Off

; Turn off normal error reporting and emit XML-RPC error XML
;xmlrpc_errors = 0
; An XML-RPC faultCode
;xmlrpc_error_number = 0

; Disable the inclusion of HTML tags in error messages.
; Note: Never use this feature for production boxes.
; 是否在出错信息中使用HTML标记。
; 注意: 不要在发布的站点上使用这个特性！
;html_errors = Off

; If html_errors is set On PHP produces clickable error messages that direct
; to a page describing the error or function causing the error in detail.
; You can download a copy of the PHP manual from http://www.php.net/docs.php
; and change docref_root to the base URL of your local copy including the
; leading ‘/’. You must also specify the file extension being used including
; the dot.
; Note: Never use this feature for production boxes.
;docref_root = “/phpmanual/”
;docref_ext = .html
; 如果打开了html_errors指令，PHP将会在出错信息上显示超连接，
; 直接链接到一个说明这个错误或者导致这个错误的函数的页面。
; 你可以从http://www.php.net/docs.php下载php手册，
; 并将docref_root指令指向你本地的手册所在的URL目录。
; 你还必须设置docref_ext指令来指定文件的扩展名(必须含有’.')。
; 注意: 不要在发布的站点上使用这个特性。

; String to output before an error message.
;error_prepend_string = “”
; 用于错误信息前输出的字符串

; String to output after an error message.
;error_append_string = “”
; 用于错误信息后输出的字符串

; Log errors to specified file.
;error_log = filename
; 将错误日志记录到哪个文件中。该文件必须对Web服务器用户可写。
; syslog 表示记录到系统日志中(NT下的事件日志, Unix下的syslog(3))
; 如果此处未设置任何值，则错误将被记录到Web服务器的错误日志中。

; Log errors to syslog (Event Log on NT, not valid in Windows 95).
;error_log = syslog

;;;;;;;;;;;;;;;;;
; Data Handling ;
;;;;;;;;;;;;;;;;;
;
; Note – track_vars is ALWAYS enabled as of PHP 4.0.3

; The separator used in PHP generated URLs to separate arguments.
; Default is “&amp;”.
;arg_separator.output = “&amp;”
; PHP所产生的URL中用来分隔参数的分隔符。
; 另外还可以用”&amp;”或”,”等等。

; List of separator(s) used by PHP to parse input URLs into variables.
; Default is “&amp;”.
; NOTE: Every character in this directive is considered as separator!
; PHP解析URL中的变量时使用的分隔符列表。
; 字符串中的每一个字符都会被当作分割符。
; 另外还可以用”,&amp;”等等。
;arg_separator.input = “;&amp;”

; This directive describes the order in which PHP registers GET, POST, Cookie,
; Environment and Built-in variables (G, P, C, E &amp; S respectively, often
; referred to as EGPCS or GPC). Registration is done from left to right, newer
; values override older values.
variables_order = “GPCS”
; PHP注册 Environment, GET, POST, Cookie, Server 变量的顺序。
; 分别用 E, G, P, C, S 表示，按从左到右注册，新值覆盖旧值。
; 举例说，设为”GP”将会导致用POST变量覆盖同名的GET变量，
; 并完全忽略 Environment, Cookie, Server 变量。
; 推荐使用”GPC”或”GPCS”，并使用getenv()函数访问环境变量。

; Whether or not to register the EGPCS variables as global variables. You may
; want to turn this off if you don’t want to clutter your scripts’ global scope
; with user data. This makes most sense when coupled with track_vars – in which
; case you can access all of the GPC variables through the $HTTP_*_VARS[],
; variables.
;
; You should do your best to write your scripts so that they do not require
; register_globals to be on; Using form variables as globals can easily lead
; to possible security problems, if the code is not very well thought of.
register_globals = Off
; 是否将 E, G, P, C, S 变量注册为全局变量。
; 打开该指令可能会导致严重的安全问题，除非你的脚本经过非常仔细的检查。
; 推荐使用预定义的超全局变量：$_ENV, $_GET, $_POST, $_COOKIE, $_SERVER
; 该指令受variables_order指令的影响。
; PHP6中已经删除此指令。

; Whether or not to register the old-style input arrays, HTTP_GET_VARS
; and friends. If you’re not using them, it’s recommended to turn them off,
; for performance reasons.
register_long_arrays = Off
; 是否启用旧式的长式数组(HTTP_*_VARS)。
; 鼓励使用短式的预定义超全局数组，并关闭该特性以获得更好的性能。
; PHP6中已经删除此指令。

; This directive tells PHP whether to declare the argv&amp;argc variables (that
; would contain the GET information). If you don’t use these variables, you
; should turn it off for increased performance.
register_argc_argv = Off
; 是否声明$argv和$argc全局变量(包含用GET方法的信息)。
; 建议不要使用这两个变量，并关掉该指令以提高性能。

; When enabled, the SERVER and ENV variables are created when they’re first
; used (Just In Time) instead of when the script starts. If these variables
; are not used within a script, having this directive on will result in a
; performance gain. The PHP directives register_globals, register_long_arrays,
; and register_argc_argv must be disabled for this directive to have any affect.
auto_globals_jit = On
; 是否仅在使用到$_SERVER和$_ENV变量时才创建(而不是在脚本一启动时就自动创建)。
; 如果并未在脚本中使用这两个数组，打开该指令将会获得性能上的提升。
; 要想该指令生效，必须关闭register_globals和register_long_arrays指令。

; Maximum size of POST data that PHP will accept.
post_max_size = 8M
; 允许的POST数据最大字节长度。此设定也影响到文件上传。
; 如果POST数据超出限制，那么$_POST和$_FILES将会为空。
; 要上传大文件，该值必须大于upload_max_filesize指令的值。
; 如果启用了内存限制，那么该值应当小于memory_limit指令的值。

; Magic quotes
;

; Magic quotes for incoming GET/POST/Cookie data.
magic_quotes_gpc = Off
; 是否对输入的GET/POST/Cookie数据使用自动字符串转义( ‘ ” \ NULL )。
; 这里的设置将自动影响 $_GEST $_POST $_COOKIE 数组的值。
; 若将本指令与magic_quotes_sybase指令同时打开，则仅将单引号(‘)转义为(”)，
; 其它特殊字符将不被转义，即( ” \ NULL )将保持原样！！
; 建议关闭此特性，并使用自定义的过滤函数。

; Magic quotes for runtime-generated data, e.g. data from SQL, from exec(), etc.
magic_quotes_runtime = Off
; 是否对运行时从外部资源产生的数据使用自动字符串转义( ‘ ” \ NULL )。
; 若打开本指令，则大多数函数从外部资源(数据库,文本文件等)返回数据都将被转义。
; 例如：用SQL查询得到的数据，用exec()函数得到的数据，等等
; 若将本指令与magic_quotes_sybase指令同时打开，则仅将单引号(‘)转义为(”)，
; 其它特殊字符将不被转义，即( ” \ NULL )将保持原样！！
; 建议关闭此特性，并视具体情况使用自定义的过滤函数。

; Use Sybase-style magic quotes (escape ‘ with ” instead of \’).
magic_quotes_sybase = Off
; 是否采用Sybase形式的自动字符串转义(用 ” 表示 ‘)

; Automatically add files before or after any PHP document.
auto_prepend_file =
auto_append_file =
; 指定在主文件之前/后自动解析的文件名。为空表示禁用该特性。
; 该文件就像调用了include()函数被包含进来一样，因此会使用include_path指令的值。
; 注意：如果脚本通过exit()终止，那么自动后缀将不会发生。

; As of 4.0b4, PHP always outputs a character encoding by default in
; the Content-type: header. To disable sending of the charset, simply
; set it to be empty.
;
; PHP’s built-in default is text/html
default_mimetype = “text/html”
;default_charset = “iso-8859-1″
; PHP默认会自动输出”Content-Type: text/html” HTTP头。
; 如果将default_charset指令设为”gb2312″，
; 那么将会自动输出”Content-Type: text/html; charset=gb2312″。
; PHP6反对使用default_charset指令，而推荐使用unicode.output_encoding指令。

; Always populate the $HTTP_RAW_POST_DATA variable.
;always_populate_raw_post_data = On
; 是否总是生成$HTTP_RAW_POST_DATA变量(原始POST数据)。
; 否则，此变量仅在遇到不能识别的MIME类型的数据时才产生。
; 不过，访问原始POST数据的更好方法是 php://input 。
; $HTTP_RAW_POST_DATA对于enctype=”multipart/form-data”的表单数据不可用。

;;;;;;;;;;;;;;;;;;;;;;;;;
; Paths and Directories ;
;;;;;;;;;;;;;;;;;;;;;;;;;

; UNIX: “/path1:/path2″
;include_path = “.:/php/includes”
; 指定一组目录用于require(), include(), fopen_with_path()函数寻找文件。
; 格式和系统的PATH环境变量类似(UNIX下用冒号分隔，Windows下用分号分隔)：
; UNIX: “/path1:/path2″
; Windows: “\path1;\path2″
; 在包含路径中使用’.'可以允许相对路径，它代表当前目录。

;
; Windows: “\path1;\path2″
;include_path = “.;c:\php\includes”

; The root of the PHP pages, used only if nonempty.
; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root
; if you are running php as a CGI under any web server (other than IIS)
; see documentation for security issues. The alternate is to use the
; cgi.force_redirect configuration below
doc_root =
; PHP的”CGI根目录”。仅在非空时有效。
; 在web服务器的主文档目录(比如”htdocs”)中放置可执行程序/脚本被认为是不安全的，
; 比如因为配置错误而将脚本作为普通的html显示。
; 因此很多系统管理员都会在主文档目录之外专门设置一个只能通过CGI来访问的目录，
; 该目录中的内容只会被解析而不会原样显示出来。
; 如果设置了该项，那么PHP就只会解释doc_root目录下的文件，
; 并确保目录外的脚本都不会被PHP解释器执行(user_dir除外)。
; 如果编译PHP时没有指定FORCE_REDIRECT，并且在非IIS服务器上以CGI方式运行，
; 则必须设置此指令(参见手册中的安全部分)。
; 替代方案是使用的cgi.force_redirect指令。

; The directory under which PHP opens the script using /~username used only
; if nonempty.
user_dir =
; 告诉php在使用 /~username 打开脚本时到哪个目录下去找，仅在非空时有效。
; 也就是在用户目录之下使用PHP文件的基本目录名，例如：”public_html”

; Directory in which the loadable extensions (modules) reside.
extension_dir = “./”
; 存放扩展库(模块)的目录，也就是PHP用来寻找动态扩展模块的目录。
; Windows下默认为”C:/php5″

; Whether or not to enable the dl() function. The dl() function does NOT work
; properly in multithreaded servers, such as IIS or Zeus, and is automatically
; disabled on them.
enable_dl = Off
; 是否允许使用dl()函数。dl()函数仅在将PHP作为apache模块安装时才有效。
; 禁用dl()函数主要是出于安全考虑，因为它可以绕过open_basedir指令的限制。
; 在安全模式下始终禁用dl()函数，而不管此处如何设置。
; PHP6中删除了该指令，相当于设为Off。

; cgi.force_redirect is necessary to provide security running PHP as a CGI under
; most web servers. Left undefined, PHP turns this on by default. You can
; turn it off here AT YOUR OWN RISK
; **You CAN safely turn this off for IIS, in fact, you MUST.**
; cgi.force_redirect = 1
; 是否打开cgi强制重定向。强烈建议打开它以为CGI方式运行的php提供安全保护。
; 你若自己关闭了它，请自己负责后果。
; 注意：在IIS/OmniHTTPD/Xitami上则必须关闭它！

; if cgi.nph is enabled it will force cgi to always sent Status: 200 with
; every request.
; cgi.nph = 1
; 在CGI模式下是否强制对所有请求都发送”Status: 200″状态码。

; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape
; (iPlanet) web servers, you MAY need to set an environment variable name that PHP
; will look for to know it is OK to continue execution. Setting this variable MAY
; cause security issues, KNOW WHAT YOU ARE DOING FIRST.
; cgi.redirect_status_env = ;
; 如果cgi.force_redirect=On，并且在Apache与Netscape之外的服务器下运行PHP，
; 可能需要设定一个cgi重定向环境变量名，PHP将去寻找它来知道是否可以继续执行下去。
; 设置这个变量会导致安全漏洞，请务必在设置前搞清楚自己在做什么。

; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI. PHP’s
; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok
; what PATH_INFO is. For more information on PATH_INFO, see the cgi specs. Setting
; this to 1 will cause PHP CGI to fix it’s paths to conform to the spec. A setting
; of zero causes PHP to behave as before. Default is 1. You should fix your scripts
; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.
; cgi.fix_pathinfo=1
; 是否为CGI提供真正的 PATH_INFO/PATH_TRANSLATED 支持(遵守cgi规范)。
; 先前的行为是将PATH_TRANSLATED设为SCRIPT_FILENAME，而不管PATH_INFO是什么。
; 打开此选项将使PHP修正其路径以遵守CGI规范，否则仍将使用旧式的不合规范的行为。
; 鼓励你打开此指令，并修正脚本以使用 SCRIPT_FILENAME 代替 PATH_TRANSLATED 。
; 有关PATH_INFO的更多信息请参见cgi规范。

; FastCGI under IIS (on WINNT based OS) supports the ability to impersonate
; security tokens of the calling client. This allows IIS to define the
; security context that the request runs under. mod_fastcgi under Apache
; does not currently support this feature (03/17/2002)
; Set to 1 if running under IIS. Default is zero.
; fastcgi.impersonate = 1;
; IIS中的FastCGI支持模仿客户端安全令牌的能力。
; 这使得IIS能够定义运行时所基于的请求的安全上下文。
; Apache中的mod_fastcgi不支持此特性(03/17/2002)
; 如果在IIS中运行则设为On，默认为Off。

; Disable logging through FastCGI connection
; fastcgi.logging = 0
; 是否记录通过FastCGI进行的连接。

; cgi.rfc2616_headers configuration option tells PHP what type of headers to
; use when sending HTTP response code. If it’s set 0 PHP sends Status: header that
; is supported by Apache. When this option is set to 1 PHP will send
; RFC2616 compliant header.
; Default is zero.
;cgi.rfc2616_headers = 0
; 指定PHP在发送HTTP响应代码时使用何种报头。
; 0 表示发送一个”Status: “报头，Apache和其它web服务器都支持。
; 若设为1，则PHP使用RFC2616标准的头。
; 除非你知道自己在做什么，否则保持其默认值 0

;;;;;;;;;;;;;;;;
; File Uploads ;
;;;;;;;;;;;;;;;;

; Whether to allow HTTP file uploads.
file_uploads = On
; 是否允许HTTP文件上传。
; 参见upload_max_filesize, upload_tmp_dir, post_max_size指令

; Temporary directory for HTTP uploaded files (will use system default if not
; specified).
;upload_tmp_dir =
; 文件上传时存放文件的临时目录(必须是PHP进程用户可写的目录)。
; 如果未指定则PHP使用系统默认的临时目录。

; Maximum allowed size for uploaded files.
upload_max_filesize = 2M
; 允许上传的文件的最大尺寸。

;;;;;;;;;;;;;;;;;;
; Fopen wrappers ;
;;;;;;;;;;;;;;;;;;

; Whether to allow the treatment of URLs (like http:// or ftp://) as files.
allow_url_fopen = On
; 是否允许打开远程文件

; Whether to allow include/require to open URLs (like http:// or ftp://) as files.
allow_url_include = Off
; 是否允许include/require远程文件。

; Define the anonymous ftp password (your email address)
;from=”john@doe.com”
; 定义匿名ftp的密码(一个email地址)

; Define the User-Agent string
; user_agent=”PHP”
; 定义”User-Agent”字符串

; Default timeout for socket based streams (seconds)
default_socket_timeout = 60
; 默认socket超时(秒)

; If your scripts have to deal with files from Macintosh systems,
; or you are running on a Mac and need to deal with files from
; unix or win32 systems, setting this flag will cause PHP to
; automatically detect the EOL character in those files so that
; fgets() and file() will work regardless of the source of the file.
; auto_detect_line_endings = Off
; 是否让PHP自动侦测行结束符(EOL)。
; 如果的你脚本必须处理Macintosh文件，
; 或者你运行在Macintosh上，同时又要处理unix或win32文件，
; 打开这个指令可以让PHP自动侦测EOL，以便fgets()和file()函数可以正常工作。
; 但同时也会导致在Unix系统下使用回车符(CR)作为项目分隔符的人遭遇不兼容行为。
; 另外，在检测第一行的EOL习惯时会有很小的性能损失。

;;;;;;;;;;;;;;;;;;;;;;
; Dynamic Extensions ;
;;;;;;;;;;;;;;;;;;;;;;
;
; If you wish to have an extension loaded automatically, use the following
; syntax:
;
; extension=modulename.extension
;
; For example, on Windows:
;
; extension=msql.dll
;
; … or under UNIX:
;
; extension=msql.so
;
; Note that it should be the name of the module only; no directory information
; needs to go here. Specify the location of the extension with the
; extension_dir directive above.

; Windows Extensions
; Note that ODBC support is built in, so no dll is needed for it.
; Note that many DLL files are located in the extensions/ (PHP 4) ext/ (PHP 5)
; extension folders as well as the separate PECL DLL download (PHP 5).
; Be sure to appropriately set the extension_dir directive.

;extension=php_bz2.dll
;extension=php_curl.dll
;extension=php_dba.dll
;extension=php_dbase.dll
;extension=php_exif.dll
;extension=php_fdf.dll
;extension=php_gd2.dll
;extension=php_gettext.dll
;extension=php_gmp.dll
;extension=php_ifx.dll
;extension=php_imap.dll
;extension=php_interbase.dll
;extension=php_ldap.dll
;extension=php_mbstring.dll
;extension=php_mcrypt.dll
;extension=php_mhash.dll
;extension=php_mime_magic.dll
;extension=php_ming.dll
;extension=php_msql.dll
;extension=php_mssql.dll
;extension=php_mysql.dll
;extension=php_mysqli.dll
;extension=php_oci8.dll
;extension=php_openssl.dll
;extension=php_pdo.dll
;extension=php_pdo_firebird.dll
;extension=php_pdo_mssql.dll
;extension=php_pdo_mysql.dll
;extension=php_pdo_oci.dll
;extension=php_pdo_oci8.dll
;extension=php_pdo_odbc.dll
;extension=php_pdo_pgsql.dll
;extension=php_pdo_sqlite.dll
;extension=php_pgsql.dll
;extension=php_pspell.dll
;extension=php_shmop.dll
;extension=php_snmp.dll
;extension=php_soap.dll
;extension=php_sockets.dll
;extension=php_sqlite.dll
;extension=php_sybase_ct.dll
;extension=php_tidy.dll
;extension=php_xmlrpc.dll
;extension=php_xsl.dll
;extension=php_zip.dll
; 在PHP启动时加载动态扩展。例如：extension=mysqli.so
; “=”之后只能使用模块文件的名字，而不能含有路径信息。
; 路径信息应当只由extension_dir指令提供。
; 主意，在windows上，下列扩展已经内置：
; bcmath ; calendar ; com_dotnet ; ctype ; session ; filter ; ftp ; hash
; iconv ; json ; odbc ; pcre ; Reflection ; date ; libxml ; standard
; tokenizer ; zlib ; SimpleXML ; dom ; SPL ; wddx ; xml ; xmlreader ; xmlwriter

;;;;;;;;;;;;;;;;;;;
; Module Settings ;
;;;;;;;;;;;;;;;;;;;

[Date]
; Defines the default timezone used by the date functions
;date.timezone =
; 未设定TZ环境变量时用于所有日期和时间函数的默认时区。
; 中国大陆应当使用”PRC”
; 应用时区的优先顺序为：
; 1. 用date_default_timezone_set()函数设定的时区(如果设定了的话)
; 2. TZ 环境变量(如果非空的话)
; 3. 该指令的值(如果设定了的话)
; 4. PHP自己推测(如果操作系统支持)
; 5. 如果以上都不成功，则使用 “UTC”

;date.default_latitude = 31.7667
;date.default_longitude = 35.2333

;date.sunrise_zenith = 90.583333
;date.sunset_zenith = 90.583333

[filter]
;filter.default = unsafe_raw
;filter.default_flags =
; 使用指定的过滤器过滤$_GET,$_POST,$_COOKIE,$_REQUEST数据，
; 原始数据可以通过input_get()函数访问。
; “unsafe_raw”表示不做任何过滤。

[iconv]
;iconv.input_encoding = ISO-8859-1
;iconv.internal_encoding = ISO-8859-1
;iconv.output_encoding = ISO-8859-1

[sqlite]
;sqlite.assoc_case = 0

[Pcre]
;PCRE library backtracking limit.
;pcre.backtrack_limit=100000
;Perl兼容正则表达式模块
; PCRE的最大回溯(backtracking)步数。

;PCRE library recursion limit.
;Please note that if you set this value to a high number you may consume all
;the available process stack and eventually crash PHP (due to reaching the
;stack size limit imposed by the Operating System).
;pcre.recursion_limit=100000
; PCRE的最大递归(recursion)深度。
; 如果你将该值设的非常高，将可能耗尽进程的栈空间，导致PHP崩溃。

[Syslog]
; Whether or not to define the various syslog variables (e.g. $LOG_PID,
; $LOG_CRON, etc.). Turning it off is a good idea performance-wise. In
; runtime, you can define these variables by calling define_syslog_variables().
define_syslog_variables = Off
; 是否定义各种系统日志变量，如：$LOG_PID, $LOG_CRON 等等。
; 关掉它以提高效率的好主意。
; 你可以在运行时调用define_syslog_variables()函数来定义这些变量。

[mail function]
; For Win32 only.
SMTP = localhost
smtp_port = 25

; For Win32 only.
;sendmail_from = me@example.com

; For Unix only. You may supply arguments as well (default: “sendmail -t -i”).
;sendmail_path =
; 仅用于unix，也可支持参数(默认的是’sendmail -t -i’)
; sendmail程序的路径，通常为”/usr/sbin/sendmail或/usr/lib/sendmail”。
; configure脚本会尝试找到该程序并设定为默认值，但是如果失败的话，可以在这里设定。
; 不使用sendmail的系统应将此指令设定为sendmail替代程序(如果有的话)。
; 例如，Qmail用户通常可以设为”/var/qmail/bin/sendmail”或”/var/qmail/bin/qmail-inject”。
; qmail-inject 不需要任何选项就能正确处理邮件。

; Force the addition of the specified parameters to be passed as extra parameters
; to the sendmail binary. These parameters will always replace the value of
; the 5th parameter to mail(), even in safe mode.
;mail.force_extra_parameters =
; 作为额外的参数传递给sendmail库的强制指定的参数附加值。
; 这些参数总是会替换掉mail()的第5个参数，即使在安全模式下也是如此。

[SQL]
sql.safe_mode = Off
; 是否使用SQL安全模式。
; 如果打开，指定默认值的数据库连接函数将会使用这些默认值代替支持的参数。
; 对于每个不同数据库的连接函数，其默认值请参考相应的手册页面。

[ODBC]
;odbc.default_db = Not yet implemented
;odbc.default_user = Not yet implemented
;odbc.default_pw = Not yet implemented

; Allow or prevent persistent links.
odbc.allow_persistent = On

; Check that a connection is still valid before reuse.
odbc.check_persistent = On

; Maximum number of persistent links. -1 means no limit.
odbc.max_persistent = -1

; Maximum number of links (persistent %2B non-persistent). -1 means no limit.
odbc.max_links = -1

; Handling of LONG fields. Returns number of bytes to variables. 0 means
; passthru.
odbc.defaultlrl = 4096

; Handling of binary data. 0 means passthru, 1 return as is, 2 convert to char.
; See the documentation on odbc_binmode and odbc_longreadlen for an explanation
; of uodbc.defaultlrl and uodbc.defaultbinmode
odbc.defaultbinmode = 1

[MySQL]
; Allow or prevent persistent links.
mysql.allow_persistent = On
; 是否允许持久连接

; Maximum number of persistent links. -1 means no limit.
mysql.max_persistent = -1
; 最大的持久连接数，设置-1则不限制

; Maximum number of links (persistent %2B non-persistent). -1 means no limit.
mysql.max_links = -1
; 最大的持久连接数和非持久连接数，设置-1则不限制

; Default port number for mysql_connect(). If unset, mysql_connect() will use
; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
; compile-time value defined MYSQL_PORT (in that order). Win32 will only look
; at MYSQL_PORT.
mysql.default_port =
; 默认的mysql端口号，如果没有设置，mysql_connect()将使用 $MYSQL_TCP_PORT 或mysql-tcp配置文件
; 编译的时候的值。windows系统只寻找MYSQL_PORT

; Default socket name for local MySQL connects. If empty, uses the built-in
; MySQL defaults.
mysql.default_socket =
; 默认的套接字名称，如果为空，使用内置的默认值

; Default host for mysql_connect() (doesn’t apply in safe mode).
mysql.default_host =
; 默认的主机（不支持安全模式）

; Default user for mysql_connect() (doesn’t apply in safe mode).
mysql.default_user =
; 默认的用户名（不支持安全模式）

; Default password for mysql_connect() (doesn’t apply in safe mode).
; Note that this is generally a *bad* idea to store passwords in this file.
; *Any* user with PHP access can run ‘echo get_cfg_var(“mysql.default_password”)
; and reveal this password! And of course, any users with read access to this
; file will be able to reveal the password as well.
mysql.default_password =
; 默认的密码。

; Maximum time (in seconds) for connect timeout. -1 means no limit
mysql.connect_timeout = 60
; 连接最大的时间

; Trace mode. When trace_mode is active (=On), warnings for table/index scans and
; SQL-Errors will be displayed.
mysql.trace_mode = Off

[MySQLi]
; MySQLi模块只能与4.1.3以上版本的MySQL一起工作。

; Maximum number of links. -1 means no limit.
mysqli.max_links = -1
; 每个进程中允许的最大连接数(持久和非持久)。-1 代表无限制

; Default port number for mysqli_connect(). If unset, mysqli_connect() will use
; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the
; compile-time value defined MYSQL_PORT (in that order). Win32 will only look
; at MYSQL_PORT.
mysqli.default_port = 3306
; mysqli_connect()连接到MySQL数据库时使用的默认TCP端口。
; 如果没有在这里指定默认值，将按如下顺序寻找：
; (1)$MYSQL_TCP_PORT环境变量
; (2)/etc/services文件中的mysql-tcp项(unix)
; (3)编译时指定的MYSQL_PORT常量
; 注意：Win32下，只使用MYSQL_PORT常量。

; Default socket name for local MySQL connects. If empty, uses the built-in
; MySQL defaults.
mysqli.default_socket =
; mysqli_connect()连接到本机MySQL服务器时所使用的默认套接字名。
; 若未指定则使用内置的MqSQL默认值。

; Default host for mysql_connect() (doesn’t apply in safe mode).
mysqli.default_host =
; mysqli_connect()连接到MySQL数据库时使用的默认主机。安全模式下无效。

; Default user for mysql_connect() (doesn’t apply in safe mode).
mysqli.default_user =
; mysqli_connect()连接到MySQL数据库时使用的默认用户名。安全模式下无效。

; Default password for mysqli_connect() (doesn’t apply in safe mode).
; Note that this is generally a *bad* idea to store passwords in this file.
; *Any* user with PHP access can run ‘echo get_cfg_var(“mysqli.default_pw”)
; and reveal this password! And of course, any users with read access to this
; file will be able to reveal the password as well.
mysqli.default_pw =
; mysqli_connect()连接到MySQL数据库时使用的默认密码。安全模式下无效。
; 在配置文件中保存密码是个坏主意，任何使用PHP权限的用户都可以运行
; ‘echo cfg_get_var(“mysql.default_password”)’来显示密码!
; 而且任何对该配置文件有读权限的用户也能看到密码。

; Allow or prevent reconnect
mysqli.reconnect = Off
; 是否允许重新连接

[mSQL]
; Allow or prevent persistent links.
msql.allow_persistent = On

; Maximum number of persistent links. -1 means no limit.
msql.max_persistent = -1

; Maximum number of links (persistent%2Bnon persistent). -1 means no limit.
msql.max_links = -1

[OCI8]
; enables privileged connections using external credentials (OCI_SYSOPER, OCI_SYSDBA)
;oci8.privileged_connect = Off

; Connection: The maximum number of persistent OCI8 connections per
; process. Using -1 means no limit.
;oci8.max_persistent = -1

; Connection: The maximum number of seconds a process is allowed to
; maintain an idle persistent connection. Using -1 means idle
; persistent connections will be maintained forever.
;oci8.persistent_timeout = -1

; Connection: The number of seconds that must pass before issuing a
; ping during oci_pconnect() to check the connection validity. When
; set to 0, each oci_pconnect() will cause a ping. Using -1 disables
; pings completely.
;oci8.ping_interval = 60

; Tuning: This option enables statement caching, and specifies how
; many statements to cache. Using 0 disables statement caching.
;oci8.statement_cache_size = 20

; Tuning: Enables statement prefetching and sets the default number of
; rows that will be fetched automatically after statement execution.
;oci8.default_prefetch = 10

; Compatibility. Using On means oci_close() will not close
; oci_connect() and oci_new_connect() connections.
;oci8.old_oci_close_semantics = Off

[PostgresSQL]
; Allow or prevent persistent links.
pgsql.allow_persistent = On

; Detect broken persistent links always with pg_pconnect().
; Auto reset feature requires a little overheads.
pgsql.auto_reset_persistent = Off

; Maximum number of persistent links. -1 means no limit.
pgsql.max_persistent = -1

; Maximum number of links (persistent%2Bnon persistent). -1 means no limit.
pgsql.max_links = -1

; Ignore PostgreSQL backends Notice message or not.
; Notice message logging require a little overheads.
pgsql.ignore_notice = 0

; Log PostgreSQL backends Noitce message or not.
; Unless pgsql.ignore_notice=0, module cannot log notice message.
pgsql.log_notice = 0

[Sybase]
; Allow or prevent persistent links.
sybase.allow_persistent = On

; Maximum number of persistent links. -1 means no limit.
sybase.max_persistent = -1

; Maximum number of links (persistent %2B non-persistent). -1 means no limit.
sybase.max_links = -1

;sybase.interface_file = “/usr/sybase/interfaces”

; Minimum error severity to display.
sybase.min_error_severity = 10

; Minimum message severity to display.
sybase.min_message_severity = 10

; Compatibility mode with old versions of PHP 3.0.
; If on, this will cause PHP to automatically assign types to results according
; to their Sybase type, instead of treating them all as strings. This
; compatibility mode will probably not stay around forever, so try applying
; whatever necessary changes to your code, and turn it off.
sybase.compatability_mode = Off

[Sybase-CT]
; Allow or prevent persistent links.
sybct.allow_persistent = On

; Maximum number of persistent links. -1 means no limit.
sybct.max_persistent = -1

; Maximum number of links (persistent %2B non-persistent). -1 means no limit.
sybct.max_links = -1

; Minimum server message severity to display.
sybct.min_server_severity = 10

; Minimum client message severity to display.
sybct.min_client_severity = 10

[bcmath]
; Number of decimal digits for all bcmath functions.
bcmath.scale = 0
; 用于所有bcmath函数的10十进制数的个数

[browscap]
;browscap = extra/browscap.ini
; 只有PWS和IIS需要这个设置
; 你可以从http://www.garykeith.com/browsers/downloads.asp
; 得到一个browscap.ini文件。

[Informix]
; Default host for ifx_connect() (doesn’t apply in safe mode).
ifx.default_host =

; Default user for ifx_connect() (doesn’t apply in safe mode).
ifx.default_user =

; Default password for ifx_connect() (doesn’t apply in safe mode).
ifx.default_password =

; Allow or prevent persistent links.
ifx.allow_persistent = On

; Maximum number of persistent links. -1 means no limit.
ifx.max_persistent = -1

; Maximum number of links (persistent %2B non-persistent). -1 means no limit.
ifx.max_links = -1

; If on, select statements return the contents of a text blob instead of its id.
ifx.textasvarchar = 0

; If on, select statements return the contents of a byte blob instead of its id.
ifx.byteasvarchar = 0

; Trailing blanks are stripped from fixed-length char columns. May help the
; life of Informix SE users.
ifx.charasvarchar = 0

; If on, the contents of text and byte blobs are dumped to a file instead of
; keeping them in memory.
ifx.blobinfile = 0

; NULL’s are returned as empty strings, unless this is set to 1. In that case,
; NULL’s are returned as string ‘NULL’.
ifx.nullformat = 0

[Session]
; Handler used to store/retrieve data.
session.save_handler = files
; 存储和检索与会话关联的数据的处理器名字。默认为文件(“files”)。
; 如果想要使用自定义的处理器(如基于数据库的处理器)，可用”user”。
; 设为”memcache”则可以使用memcache作为会话处理器(需要指定”–enable-memcache-session”编译选项)。
; 还有一个使用PostgreSQL的处理器：http://sourceforge.net/projects/phpform-ext/

; Argument passed to save_handler. In the case of files, this is the path
; where data files are stored. Note: Windows users have to change this
; variable in order to use PHP’s session functions.
;
; As of PHP 4.0.1, you can define the path as:
;
; session.save_path = “N;/path”
;
; where N is an integer. Instead of storing all the session files in
; /path, what this will do is use subdirectories N-levels deep, and
; store the session data in those directories. This is useful if you
; or your OS have problems with lots of files in one directory, and is
; a more efficient layout for servers that handle lots of sessions.
;
; NOTE 1: PHP will not create this directory structure automatically.
; You can use the script in the ext/session dir for that purpose.
; NOTE 2: See the section on garbage collection below if you choose to
; use subdirectories for session storage
;
; The file storage module creates files using mode 600 by default.
; You can change that by using
;
; session.save_path = “N;MODE;/path”
;
; where MODE is the octal representation of the mode. Note that this
; does not overwrite the process’s umask.
;session.save_path = “/tmp”
; 传递给存储处理器的参数。对于files处理器，此值是创建会话数据文件的路径。
; Windows下默认为临时文件夹路径。
; 你可以使用”N;[MODE;]/path”这样模式定义该路径(N是一个整数)。
; N表示使用N层深度的子目录，而不是将所有数据文件都保存在一个目录下。
; [MODE;]可选，必须使用8进制数，默认”600″，表示文件的访问权限。
; 这是一个提高大量会话性能的好主意。
; 注意0: “N;[MODE;]/path”两边的双引号不能省略。
; 注意1: [MODE;]并不会改写进程的umask。
; 注意2: php不会自动创建这些文件夹结构。请使用ext/session目录下的mod_files.sh脚本创建。
; 注意3: 如果该文件夹可以被不安全的用户访问(比如默认的”/tmp”)，那么将会带来安全漏洞。
; 注意4: 当N&gt;0时自动垃圾回收将会失效，具体参见下面有关垃圾搜集的部分。
; [安全提示]建议针对每个不同的虚拟主机分别设置各自不同的目录。
;
; 对于”memcache”处理器，需要定义一个逗号分隔的服务器URL用来存储会话数据。
; 比如：”tcp://host1:11211, tcp://host2:11211″
; 每个URL都可以包含传递给那个服务器的参数，可用的参数与 Memcache::addServer() 方法相同。
; 例如：”tcp://host1:11211?persistent=1&amp;weight=1&amp;timeout=1&amp;retry_interval=15″

; Whether to use cookies.
session.use_cookies = 1
; 是否使用cookie在客户端保存会话ID

;session.cookie_secure =
; 是否仅仅通过安全连接(https)发送cookie。

; This option enables administrators to make their users invulnerable to
; attacks which involve passing session ids in URLs; defaults to 0.
; session.use_only_cookies = 1

; Name of the session (used as cookie name).
session.name = PHPSESSID
;用在cookie里的会话ID标识名，只能包含字母和数字。

; Initialize session on request startup.
session.auto_start = 0
; 在客户访问任何页面时都自动初始化会话，默认禁止。
; 因为类定义必须在会话启动之前被载入，所以若打开这个选项，你就不能在会话中存放对象。

; Lifetime in seconds of cookie or, if 0, until browser is restarted.
session.cookie_lifetime = 0
; 传递会话ID的Cookie有效期(秒)，0 表示仅在浏览器打开期间有效。
; [提示]如果你不能保证服务器时间和客户端时间严格一致请不要改变此默认值！

; The path for which the cookie is valid.
session.cookie_path = /
; 传递会话ID的Cookie作用路径。

; The domain for which the cookie is valid.
session.cookie_domain =
; 传递会话ID的Cookie作用域。
; 默认为空表示表示根据cookie规范生成的主机名。

; Whether or not to add the httpOnly flag to the cookie, which makes it inaccessible to browser scripting languages such as JavaScript.
session.cookie_httponly =
; 是否在cookie中添加httpOnly标志(仅允许HTTP协议访问)，
; 这将导致客户端脚本(JavaScript等)无法访问该cookie。
; 打开该指令可以有效预防通过XSS攻击劫持会话ID。

; Handler used to serialize data. php is the standard serializer of PHP.
session.serialize_handler = php
; 用来序列化/解序列化数据的处理器，php是标准序列化/解序列化处理器。
; 另外还可以使用”php_binary”。当启用了WDDX支持以后，将只能使用”wddx”。

; Define the probability that the ‘garbage collection’ process is started
; on every session initialization.
; The probability is calculated by using gc_probability/gc_divisor,
; e.g. 1/100 means there is a 1% chance that the GC process starts
; on each request.

session.gc_probability = 1
session.gc_divisor = 1000
; 定义在每次初始化会话时，启动垃圾回收程序的概率。
; 这个收集概率计算公式如下：session.gc_probability/session.gc_divisor
; 对会话页面访问越频繁，概率就应当越小。建议值为1/1000~5000。

; After this number of seconds, stored data will be seen as ‘garbage’ and
; cleaned up by the garbage collection process.
session.gc_maxlifetime = 1440
; 超过此参数所指的秒数后，保存的数据将被视为’垃圾’并由垃圾回收程序清理。
; 判断标准是最后访问数据的时间(对于FAT文件系统是最后刷新数据的时间)。
; 如果多个脚本共享同一个session.save_path目录但session.gc_maxlifetime不同，
; 那么将以所有session.gc_maxlifetime指令中的最小值为准。
; 如果使用多层子目录来存储数据文件，垃圾回收程序不会自动启动。
; 你必须使用一个你自己编写的shell脚本、cron项或者其他办法来执行垃圾搜集。
; 比如，下面的脚本相当于设置了”session.gc_maxlifetime=1440″ (24分钟)：
; cd /path/to/sessions; find -cmin %2B24 | xargs rm

; NOTE: If you are using the subdirectory option for storing session files
; (see session.save_path above), then garbage collection does *not*
; happen automatically. You will need to do your own garbage
; collection through a shell script, cron entry, or some other method.
; For example, the following script would is the equivalent of
; setting session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):
; cd /path/to/sessions; find -cmin %2B24 | xargs rm

; PHP 4.2 and less have an undocumented feature/bug that allows you to
; to initialize a session variable in the global scope, albeit register_globals
; is disabled. PHP 4.3 and later will warn you, if this feature is used.
; You can disable the feature and the warning separately. At this time,
; the warning is only displayed, if bug_compat_42 is enabled.

session.bug_compat_42 = 0
session.bug_compat_warn = 1
; PHP4.2之前的版本有一个未注明的”BUG”：
; 即使在register_globals=Off的情况下也允许初始化全局session变量，
; 如果你在PHP4.3之后的版本中使用这个特性，会显示一条警告。
; 建议关闭该”BUG”并显示警告。PHP6删除了这两个指令，相当于全部设为Off。

; Check HTTP Referer to invalidate externally stored URLs containing ids.
; HTTP_REFERER has to contain this substring for the session to be
; considered as valid.
session.referer_check =
; 如果请求头中的”Referer”字段不包含此处指定的字符串则会话ID将被视为无效。
; 注意：如果请求头中根本不存在”Referer”字段的话，会话ID将仍将被视为有效。
; 默认为空，即不做检查(全部视为有效)。

; How many bytes to read from the file.
session.entropy_length = 0
; 从高熵值资源中读取的字节数(建议值：16)。

; Specified here to create the session id.
session.entropy_file =
; 附加的用于创建会话ID的外部高熵值资源(文件)，
; 例如UNIX系统上的”/dev/random”或”/dev/urandom”

;session.entropy_length = 16

;session.entropy_file = /dev/urandom

; Set to {nocache,private,public,} to determine HTTP caching aspects
; or leave this empty to avoid sending anti-caching headers.
session.cache_limiter = nocache
; 设为{nocache|private|public}以指定会话页面的缓存控制模式，
; 或者设为空以阻止在http应答头中发送禁用缓存的命令。

; Document expires after n minutes.
session.cache_expire = 180
; 指定会话页面在客户端cache中的有效期限(分钟)
; session.cache_limiter=nocache时，此处设置无效。

; trans sid support is disabled by default.
; Use of trans sid may risk your users security.
; Use this option with caution.
; – User may send URL contains active session ID
; to other person via. email/irc/etc.
; – URL that contains active session ID may be stored
; in publically accessible computer.
; – User may access your site with the same session ID
; always using URL stored in browser’s history or bookmarks.
session.use_trans_sid = 0
; 是否使用明码在URL中显示SID(会话ID)。
; 默认是禁止的，因为它会给你的用户带来安全危险：
; 1- 用户可能将包含有效sid的URL通过email/irc/QQ/MSN…途径告诉给其他人。
; 2- 包含有效sid的URL可能会被保存在公用电脑上。
; 3- 用户可能保存带有固定不变sid的URL在他们的收藏夹或者浏览历史纪录里面。
; 基于URL的会话管理总是比基于Cookie的会话管理有更多的风险，所以应当禁用。

; Select a hash function
; 0: MD5 (128 bits)
; 1: SHA-1 (160 bits)
session.hash_function = 0
; 生成SID的散列算法。SHA-1的安全性更高一些
; 0: MD5 (128 bits)
; 1: SHA-1 (160 bits)
; 建议使用SHA-1。

; Define how many bits are stored in each character when converting
; the binary hash data to something readable.
;
; 4 bits: 0-9, a-f
; 5 bits: 0-9, a-v
; 6 bits: 0-9, a-z, A-Z, “-”, “,”
session.hash_bits_per_character = 5
; 指定在SID字符串中的每个字符内保存多少bit，
; 这些二进制数是hash函数的运算结果。
; 4: 0-9, a-f
; 5: 0-9, a-v
; 6: 0-9, a-z, A-Z, “-”, “,”
; 建议值为 5

; The URL rewriter will look for URLs in a defined set of HTML tags.
; form/fieldset are special; if you include them here, the rewriter will
; add a hidden

field with the info which is otherwise appended
; to URLs. If you want XHTML conformity, remove the form entry.
; Note that all valid entries require a “=”, even if no value follows.
url_rewriter.tags = “a=href,area=href,frame=src,input=src,form=fakeentry”
; 此指令属于PHP核心部分，并不属于Session模块。
; 指定重写哪些HTML标签来包含SID(仅当session.use_trans_sid=On时有效)
; form和fieldset比较特殊：
; 如果你包含他们，URL重写器将添加一个隐藏的”

“，它包含了本应当额外追加到URL上的信息。
; 如果要符合XHTML标准，请去掉form项并在表单字段前后加上

标记。
; 注意：所有合法的项都需要一个等号(即使后面没有值)。
; 推荐值为”a=href,area=href,frame=src,input=src,form=fakeentry”。

[MSSQL]
; Allow or prevent persistent links.
mssql.allow_persistent = On

; Maximum number of persistent links. -1 means no limit.
mssql.max_persistent = -1

; Maximum number of links (persistent%2Bnon persistent). -1 means no limit.
mssql.max_links = -1

; Minimum error severity to display.
mssql.min_error_severity = 10

; Minimum message severity to display.
mssql.min_message_severity = 10

; Compatibility mode with old versions of PHP 3.0.
mssql.compatability_mode = Off

; Connect timeout
;mssql.connect_timeout = 5

; Query timeout
;mssql.timeout = 60

; Valid range 0 – 2147483647. Default = 4096.
;mssql.textlimit = 4096

; Valid range 0 – 2147483647. Default = 4096.
;mssql.textsize = 4096

; Limits the number of records in each batch. 0 = all records in one batch.
;mssql.batchsize = 0

; Specify how datetime and datetim4 columns are returned
; On =&gt; Returns data converted to SQL server settings
; Off =&gt; Returns values as YYYY-MM-DD hh:mm:ss
;mssql.datetimeconvert = On

; Use NT authentication when connecting to the server
mssql.secure_connection = Off

; Specify max number of processes. -1 = library default
; msdlib defaults to 25
; FreeTDS defaults to 4096
;mssql.max_procs = -1

; Specify client character set.
; If empty or not set the client charset from freetds.comf is used
; This is only used when compiled with FreeTDS
;mssql.charset = “ISO-8859-1″

[Assertion]
; Assert(expr); active by default.
;assert.active = On
; 是否启用assert()断言评估

; Issue a PHP warning for each failed assertion.
;assert.warning = On
; 是否对每个失败断言都发出警告

; Don’t bail out by default.
;assert.bail = Off
; 是否在发生失败断言时中止脚本的执行

; User-function to be called if an assertion fails.
;assert.callback = 0
; 发生失败断言时执行的回调函数

; Eval the expression with current error_reporting(). Set to true if you want
; error_reporting(0) around the eval().
;assert.quiet_eval = 0
; 是否使用安静评估(不显示任何错误信息，相当于error_reporting=0)。
; 若关闭则在评估断言表达式的时候使用当前的error_reporting指令值。

[COM]
; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs
;com.typelib_file =
; allow Distributed-COM calls
;com.allow_dcom = true
; autoregister constants of a components typlib on com_load()
;com.autoregister_typelib = true
; register constants casesensitive
;com.autoregister_casesensitive = false
; show warnings on duplicate constant registrations
;com.autoregister_verbose = true

[mbstring]
; language for internal character representation.
;mbstring.language = Japanese
; 默认的NLS(本地语言设置)，可设置值如下：
; 默认值”neutral”表示中立，相当于未知。
; “zh-cn”或”Simplified Chinese”表示简体中文
; “zh-tw”或”Traditional Chinese”表示繁体中文
; “uni”或”universal”表示Unicode
; 该指令自动定义了随后的mbstring.internal_encoding指令默认值，
; 并且mbstring.internal_encoding指令必须放置在该指令之后。

; internal/script encoding.
; Some encoding cannot work as internal encoding.
; (e.g. SJIS, BIG5, ISO-2022-*)
;mbstring.internal_encoding = EUC-JP
; 本指令必须放置在mbstring.language指令之后。
; 默认的内部编码，未设置时取决于mbstring.language指令的值：
; “neutral” 对应 “ISO-8859-1″
; “zh-cn” 对应 “EUC-CN” (等价于”GB2312″)
; “zh-tw” 对应 “EUC-TW” (等价于”BIG5″)
; “uni” 对应 “UTF-8″
; 提醒：对于简体中文还可以强制设置为”CP936″ (等价于”GBK”)
; 注意：可能 SJIS, BIG5, GBK 不适合作为内部编码，不过”GB2312″肯定没问题。
; 建议手动强制指定

; http input encoding.
;mbstring.http_input = auto
; 默认的HTTP输入编码，”pass”表示跳过(不做转换)
; “aotu”的含义与mbstring.detect_order指令中的解释一样。
; 可以设置为一个单独的值，也可以设置为一个逗号分隔的列表。

; http output encoding. mb_output_handler must be
; registered as output buffer to function
;mbstring.http_output = SJIS
; 默认的HTTP输出编码，”pass”表示跳过(不做转换)
; “aotu”的含义与mbstring.detect_order指令中的解释一样。
; 可以设置为一个单独的值，也可以设置为一个逗号分隔的列表。
; 必须将output_handler指令设置为”mb_output_handler”才可以。

; enable automatic encoding translation according to
; mbstring.internal_encoding setting. Input chars are
; converted to internal encoding by setting this to On.
; Note: Do _not_ use automatic encoding translation for
; portable libs/applications.
;mbstring.encoding_translation = Off
; 是否对进入的HTTP请求按照mbstring.internal_encoding指令进行透明的编码转换，
; 也就是自动检测输入字符的编码并将其透明的转化为内部编码。
; 可移植的库或者程序千万不要依赖于自动编码转换。

; automatic encoding detection order.
; auto means
;mbstring.detect_order = auto
; 默认的编码检测顺序，”pass”表示跳过(不做转换)。
; 默认值(“auto”)随mbstring.language指令的不同而变化：
; “neutral”和”universal” 对应 “ASCII, UTF-8″
; “Simplified Chinese” 对应 “ASCII, UTF-8, EUC-CN, CP936″
; “Traditional Chinese” 对应 “ASCII, UTF-8, EUC-TW, BIG-5″
; 建议在可控环境下手动强制指定一个单一值

; substitute_character used when character cannot be converted
; one from another
;mbstring.substitute_character = none;
; 当某个字符无法解码时，就是用这个字符替代。
; 若设为一个整数则表示对应的Unicode值，不设置任何值表示不显示这个错误字符。
; 建议设为”□”

; overload(replace) single byte functions by mbstring functions.
; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),
; etc. Possible values are 0,1,2,4 or combination of them.
; For example, 7 for overload everything.
; 0: No overload
; 1: Overload mail() function
; 2: Overload str*() functions
; 4: Overload ereg*() functions
;mbstring.func_overload = 0
; 自动使用 mb_* 函数重载相应的单字节字符串函数。
; 比如：mail(), ereg() 将被自动替换为mb_send_mail(), mb_ereg()
; 可用 0,1,2,4 进行位组合。比如7表示替换所有。具体替换说明如下：
; 0: 无替换
; 1: mail() → mb_send_mail()
; 2: strlen() → mb_strlen() ; substr() → mb_substr()
; strpos() → mb_strpos() ; strrpos() → mb_strrpos()
; strtolower() → mb_strtolower() ; strtoupper() → mb_strtoupper()
; substr_count() → mb_substr_count()
; 4: ereg() → mb_ereg() ; eregi() → mb_eregi()
; ereg_replace() → mb_ereg_replace() ; eregi_replace() → mb_eregi_replace()
; split() → mb_split()

; enable strict encoding detection.
;mbstring.strict_encoding = Off

[FrontBase]
;fbsql.allow_persistent = On
;fbsql.autocommit = On
;fbsql.show_timestamp_decimals = Off
;fbsql.default_database =
;fbsql.default_database_password =
;fbsql.default_host =
;fbsql.default_password =
;fbsql.default_user = “_SYSTEM”
;fbsql.generate_warnings = Off
;fbsql.max_connections = 128
;fbsql.max_links = 128
;fbsql.max_persistent = -1
;fbsql.max_results = 128

[gd]
; Tell the jpeg decode to libjpeg warnings and try to create
; a gd image. The warning will then be displayed as notices
; disabled by default
;gd.jpeg_ignore_warning = 0
; 是否忽略jpeg解码器的警告信息(比如无法识别图片格式)。
; 有image/jpeg与image/pjpeg两种MIME类型，GD库只能识别前一种传统格式。
; 参见：http://twpug.net/modules/newbb/viewtopic.php?topic_id=1867&amp;forum=14
; http://bugs.php.net/bug.php?id=29878
; http://www.faqs.org/faqs/jpeg-faq/part1/section-11.html

[exif]
; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.
; With mbstring support this will automatically be converted into the encoding
; given by corresponding encode setting. When empty mbstring.internal_encoding
; is used. For the decode settings you can distinguish between motorola and
; intel byte order. A decode setting cannot be empty.
;exif.encode_unicode = ISO-8859-15
;exif.decode_unicode_motorola = UCS-2BE
;exif.decode_unicode_intel = UCS-2LE
;exif.encode_jis =
;exif.decode_jis_motorola = JIS
;exif.decode_jis_intel = JIS

[Tidy]
; The path to a default tidy configuration file to use when using tidy
;tidy.default_config = /usr/local/lib/php/default.tcfg

; Should tidy clean and repair output automatically?
; WARNING: Do not use this option if you are generating non-html content
; such as dynamic images
tidy.clean_output = Off

[soap]
; Enables or disables WSDL caching feature.
soap.wsdl_cache_enabled=1
; Sets the directory name where SOAP extension will put cache files.
soap.wsdl_cache_dir=”/tmp”
; (time to live) Sets the number of second while cached file will be used
; instead of original one.
soap.wsdl_cache_ttl=86400

; Local Variables:
; tab-width: 4
; End:


   [1]: http://blog.lizhigang.net/wp-content/uploads/2009/04/php_e4b8ade69687e6b3a8e9878a.ini
  